buildscript {
    ext.kotlinVersion = '1.3.61'
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath 'org.javamodularity:moduleplugin:1.6.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

allprojects {
    group 'asia.kala'
    version '0.1.0'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.javamodularity.moduleplugin'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    modularity.mixedJavaRelease 8

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        // https://mvnrepository.com/artifact/org.jetbrains/annotations
        compileOnly group: 'org.jetbrains', name: 'annotations', version: '18.0.0'

        compileOnly group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlinVersion

        compileOnly group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion

        testImplementation group: 'org.jetbrains', name: 'annotations', version: '18.0.0'

        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.5.2'
    }

    if (project.name.endsWith('kotlin') && (project != project(':kala-base-kotlin'))) {
        apply plugin: 'kotlin'

        compileKotlin {
            kotlinOptions {
                jvmTarget = '1.8'
            }
        }
    }

    test {
        testLogging.showStandardStreams = true
        useJUnitPlatform()

        moduleOptions {
            runOnClasspath = true
        }
    }

    compileTestJava {
        moduleOptions {
            addModules = ['org.junit.jupiter.api']
            addReads = [
                    (moduleName): 'org.junit.jupiter.api'
            ]
        }
    }

    if (project.name != 'kala-base' && !project.name.endsWith('kotlin')) {
        javadoc {
            source = sourceSets.main.allSource

            options {
                encoding = 'UTF-8'
                locale = 'en_US'
                tags = ['apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:', 'implNote:a:Implementation Note:']
            }

            options.addStringOption('link', 'https://docs.oracle.com/en/java/javase/11/docs/api/')
            options.addBooleanOption('html5', true)
            options.addStringOption('Xdoclint:none', '-quiet')
        }

        task javadocJar(type: Jar) {
            from javadoc
            archiveClassifier = 'javadoc'
        }
    }


    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        exclude 'module-info.class'
        archiveClassifier = 'sources'
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    publishing {
        publications {
            Kala(MavenPublication) {
                from components.java

                artifact sourcesJar

                if (project.name != 'kala-base' && !project.name.endsWith('kotlin')) {
                    artifact javadocJar
                }
                pom {
                    name = project.name
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'glavo'
                            name = 'Glavo'
                            email = 'zjx001202@gmail.com'
                        }
                    }
                }
            }
        }
    }

    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
        publications = ['Kala']
        pkg {
            repo = 'maven'
            name = project.name
            licenses = ['Apache-2.0']
            publicDownloadNumbers = true
            version {
                name = project.version
                desc = "${project.name} ${project.version}"
                vcsTag = project.version
            }
        }
    }

    task travisPublish() {}

    if (!project.version.toString().endsWith("SHAPSHOT")) {
        travisPublish.dependsOn(bintrayUpload)
    }

}

